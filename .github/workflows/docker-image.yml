name: "Build Docker Image & Test"

on:
  push:
    branches: ["main", "feature/#10"]
  pull_request:
    branches: ["main"]

jobs:
  # TODO Frontのテストを通るようにする
  #https://github.com/TakehikoEsaka/odekakekun/actions/runs/5163318676/jobs/9301574218
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js v14.13.1
        uses: actions/setup-node@v1
        with:
          node-version: "14.13.1"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # - run: if [ -f ./project/frontend/package.json ]; then yarn install -r ./project/frontend/package.json; fi
      - run: |
          cd ./project/frontend/
          ls
          yarn install
      # ディレクトリ移動は維持される
      - run: |
          cd ./project/frontend/
          ls
          yarn test

  # TODO PytestのSTEPが通らないので通るようにしておく
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 複数のバージョンでテストしたい時はこのように記載しておく
        python-version: [3.9]

    steps:
      # $GITHUB_WORKSPACE : /home/runner/work/odekakekun/odekakekun
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f ./project/backend/requirements.txt ]; then pip install -r ./project/backend/requirements.txt; fi

      - name: Static Code Linting with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Unit Testing with pytest
        # env:
        #   # add environment variables for tests
        run: |
          pytest

  # TODO ECRにImageをPUSHする
  # https://github.com/TakehikoEsaka/odekakekun/actions/runs/5163318676/jobs/9301574218
  docker-build:
    name: Build
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build the Docker image
        uses: docker/build-push-action@v4
        with:
          push: false
          tags: backend-image:${{ github.sha }}
          context: project/backend
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
